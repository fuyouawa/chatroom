// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: emergency.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_emergency_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_emergency_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_emergency_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_emergency_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_emergency_2eproto;
namespace chatroom {
namespace message {
class Emergency;
class EmergencyDefaultTypeInternal;
extern EmergencyDefaultTypeInternal _Emergency_default_instance_;
}  // namespace message
}  // namespace chatroom
PROTOBUF_NAMESPACE_OPEN
template<> ::chatroom::message::Emergency* Arena::CreateMaybeMessage<::chatroom::message::Emergency>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chatroom {
namespace message {

// ===================================================================

class Emergency PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chatroom.message.Emergency) */ {
 public:
  inline Emergency() : Emergency(nullptr) {};
  virtual ~Emergency();

  Emergency(const Emergency& from);
  Emergency(Emergency&& from) noexcept
    : Emergency() {
    *this = ::std::move(from);
  }

  inline Emergency& operator=(const Emergency& from) {
    CopyFrom(from);
    return *this;
  }
  inline Emergency& operator=(Emergency&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Emergency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Emergency* internal_default_instance() {
    return reinterpret_cast<const Emergency*>(
               &_Emergency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Emergency& a, Emergency& b) {
    a.Swap(&b);
  }
  inline void Swap(Emergency* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Emergency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Emergency* New() const final {
    return CreateMaybeMessage<Emergency>(nullptr);
  }

  Emergency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Emergency>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Emergency& from);
  void MergeFrom(const Emergency& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Emergency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chatroom.message.Emergency";
  }
  protected:
  explicit Emergency(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_emergency_2eproto);
    return ::descriptor_table_emergency_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtrasFieldNumber = 2,
    kEventIdFieldNumber = 1,
  };
  // string extras = 2;
  void clear_extras();
  const std::string& extras() const;
  void set_extras(const std::string& value);
  void set_extras(std::string&& value);
  void set_extras(const char* value);
  void set_extras(const char* value, size_t size);
  std::string* mutable_extras();
  std::string* release_extras();
  void set_allocated_extras(std::string* extras);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_extras();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_extras(
      std::string* extras);
  private:
  const std::string& _internal_extras() const;
  void _internal_set_extras(const std::string& value);
  std::string* _internal_mutable_extras();
  public:

  // int32 event_id = 1;
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::int32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:chatroom.message.Emergency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extras_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_emergency_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Emergency

// int32 event_id = 1;
inline void Emergency::clear_event_id() {
  event_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Emergency::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Emergency::event_id() const {
  // @@protoc_insertion_point(field_get:chatroom.message.Emergency.event_id)
  return _internal_event_id();
}
inline void Emergency::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  event_id_ = value;
}
inline void Emergency::set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:chatroom.message.Emergency.event_id)
}

// string extras = 2;
inline void Emergency::clear_extras() {
  extras_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Emergency::extras() const {
  // @@protoc_insertion_point(field_get:chatroom.message.Emergency.extras)
  return _internal_extras();
}
inline void Emergency::set_extras(const std::string& value) {
  _internal_set_extras(value);
  // @@protoc_insertion_point(field_set:chatroom.message.Emergency.extras)
}
inline std::string* Emergency::mutable_extras() {
  // @@protoc_insertion_point(field_mutable:chatroom.message.Emergency.extras)
  return _internal_mutable_extras();
}
inline const std::string& Emergency::_internal_extras() const {
  return extras_.Get();
}
inline void Emergency::_internal_set_extras(const std::string& value) {
  
  extras_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Emergency::set_extras(std::string&& value) {
  
  extras_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:chatroom.message.Emergency.extras)
}
inline void Emergency::set_extras(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extras_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:chatroom.message.Emergency.extras)
}
inline void Emergency::set_extras(const char* value,
    size_t size) {
  
  extras_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:chatroom.message.Emergency.extras)
}
inline std::string* Emergency::_internal_mutable_extras() {
  
  return extras_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Emergency::release_extras() {
  // @@protoc_insertion_point(field_release:chatroom.message.Emergency.extras)
  return extras_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Emergency::set_allocated_extras(std::string* extras) {
  if (extras != nullptr) {
    
  } else {
    
  }
  extras_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extras,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:chatroom.message.Emergency.extras)
}
inline std::string* Emergency::unsafe_arena_release_extras() {
  // @@protoc_insertion_point(field_unsafe_arena_release:chatroom.message.Emergency.extras)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return extras_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Emergency::unsafe_arena_set_allocated_extras(
    std::string* extras) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (extras != nullptr) {
    
  } else {
    
  }
  extras_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      extras, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chatroom.message.Emergency.extras)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace chatroom

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_emergency_2eproto
